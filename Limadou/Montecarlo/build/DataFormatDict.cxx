//
// File generated by /usr/local/root_v5.34.32/root/bin/rootcint at Mon Jan  9 17:18:17 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIwilliamdIaiglondIgeant4dIHEPDSWdIbuilddIDataFormatDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataFormatDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void RootCaloHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RootCaloHit(void *p = 0);
   static void *newArray_RootCaloHit(Long_t size, void *p);
   static void delete_RootCaloHit(void *p);
   static void deleteArray_RootCaloHit(void *p);
   static void destruct_RootCaloHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RootCaloHit*)
   {
      ::RootCaloHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RootCaloHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RootCaloHit", ::RootCaloHit::Class_Version(), "/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootCaloHit.hh", 14,
                  typeid(::RootCaloHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RootCaloHit::Dictionary, isa_proxy, 4,
                  sizeof(::RootCaloHit) );
      instance.SetNew(&new_RootCaloHit);
      instance.SetNewArray(&newArray_RootCaloHit);
      instance.SetDelete(&delete_RootCaloHit);
      instance.SetDeleteArray(&deleteArray_RootCaloHit);
      instance.SetDestructor(&destruct_RootCaloHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RootCaloHit*)
   {
      return GenerateInitInstanceLocal((::RootCaloHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RootCaloHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RootTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RootTrack(void *p = 0);
   static void *newArray_RootTrack(Long_t size, void *p);
   static void delete_RootTrack(void *p);
   static void deleteArray_RootTrack(void *p);
   static void destruct_RootTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RootTrack*)
   {
      ::RootTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RootTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RootTrack", ::RootTrack::Class_Version(), "/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootTrack.hh", 13,
                  typeid(::RootTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RootTrack::Dictionary, isa_proxy, 4,
                  sizeof(::RootTrack) );
      instance.SetNew(&new_RootTrack);
      instance.SetNewArray(&newArray_RootTrack);
      instance.SetDelete(&delete_RootTrack);
      instance.SetDeleteArray(&deleteArray_RootTrack);
      instance.SetDestructor(&destruct_RootTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RootTrack*)
   {
      return GenerateInitInstanceLocal((::RootTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RootTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RootVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RootVertex(void *p = 0);
   static void *newArray_RootVertex(Long_t size, void *p);
   static void delete_RootVertex(void *p);
   static void deleteArray_RootVertex(void *p);
   static void destruct_RootVertex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RootVertex*)
   {
      ::RootVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RootVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RootVertex", ::RootVertex::Class_Version(), "/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootVertex.hh", 14,
                  typeid(::RootVertex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RootVertex::Dictionary, isa_proxy, 4,
                  sizeof(::RootVertex) );
      instance.SetNew(&new_RootVertex);
      instance.SetNewArray(&newArray_RootVertex);
      instance.SetDelete(&delete_RootVertex);
      instance.SetDeleteArray(&deleteArray_RootVertex);
      instance.SetDestructor(&destruct_RootVertex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RootVertex*)
   {
      return GenerateInitInstanceLocal((::RootVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RootVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RootTrackerHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RootTrackerHit(void *p = 0);
   static void *newArray_RootTrackerHit(Long_t size, void *p);
   static void delete_RootTrackerHit(void *p);
   static void deleteArray_RootTrackerHit(void *p);
   static void destruct_RootTrackerHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RootTrackerHit*)
   {
      ::RootTrackerHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RootTrackerHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RootTrackerHit", ::RootTrackerHit::Class_Version(), "/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootTrackerHit.hh", 14,
                  typeid(::RootTrackerHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RootTrackerHit::Dictionary, isa_proxy, 4,
                  sizeof(::RootTrackerHit) );
      instance.SetNew(&new_RootTrackerHit);
      instance.SetNewArray(&newArray_RootTrackerHit);
      instance.SetDelete(&delete_RootTrackerHit);
      instance.SetDeleteArray(&deleteArray_RootTrackerHit);
      instance.SetDestructor(&destruct_RootTrackerHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RootTrackerHit*)
   {
      return GenerateInitInstanceLocal((::RootTrackerHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RootTrackerHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RootEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RootEvent(void *p = 0);
   static void *newArray_RootEvent(Long_t size, void *p);
   static void delete_RootEvent(void *p);
   static void deleteArray_RootEvent(void *p);
   static void destruct_RootEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RootEvent*)
   {
      ::RootEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RootEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RootEvent", ::RootEvent::Class_Version(), "/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootEvent.hh", 16,
                  typeid(::RootEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RootEvent::Dictionary, isa_proxy, 4,
                  sizeof(::RootEvent) );
      instance.SetNew(&new_RootEvent);
      instance.SetNewArray(&newArray_RootEvent);
      instance.SetDelete(&delete_RootEvent);
      instance.SetDeleteArray(&deleteArray_RootEvent);
      instance.SetDestructor(&destruct_RootEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RootEvent*)
   {
      return GenerateInitInstanceLocal((::RootEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RootEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr RootCaloHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RootCaloHit::Class_Name()
{
   return "RootCaloHit";
}

//______________________________________________________________________________
const char *RootCaloHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootCaloHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RootCaloHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootCaloHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RootCaloHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootCaloHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RootCaloHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootCaloHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RootTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RootTrack::Class_Name()
{
   return "RootTrack";
}

//______________________________________________________________________________
const char *RootTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RootTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RootTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RootTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RootVertex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RootVertex::Class_Name()
{
   return "RootVertex";
}

//______________________________________________________________________________
const char *RootVertex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RootVertex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RootVertex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RootVertex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootVertex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RootTrackerHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RootTrackerHit::Class_Name()
{
   return "RootTrackerHit";
}

//______________________________________________________________________________
const char *RootTrackerHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrackerHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RootTrackerHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrackerHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RootTrackerHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrackerHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RootTrackerHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootTrackerHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RootEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RootEvent::Class_Name()
{
   return "RootEvent";
}

//______________________________________________________________________________
const char *RootEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RootEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RootEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RootEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RootEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RootEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void RootCaloHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class RootCaloHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RootCaloHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(RootCaloHit::Class(),this);
   }
}

//______________________________________________________________________________
void RootCaloHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RootCaloHit.
      TClass *R__cl = ::RootCaloHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theDet", &theDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTotalEdep", &theTotalEdep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theEdep", (void*)&theEdep);
      R__insp.InspectMember("map<int,double>", (void*)&theEdep, "theEdep.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theParticleList", (void*)&theParticleList);
      R__insp.InspectMember("vector<int>", (void*)&theParticleList, "theParticleList.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RootCaloHit(void *p) {
      return  p ? new(p) ::RootCaloHit : new ::RootCaloHit;
   }
   static void *newArray_RootCaloHit(Long_t nElements, void *p) {
      return p ? new(p) ::RootCaloHit[nElements] : new ::RootCaloHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootCaloHit(void *p) {
      delete ((::RootCaloHit*)p);
   }
   static void deleteArray_RootCaloHit(void *p) {
      delete [] ((::RootCaloHit*)p);
   }
   static void destruct_RootCaloHit(void *p) {
      typedef ::RootCaloHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RootCaloHit

//______________________________________________________________________________
void RootTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class RootTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RootTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(RootTrack::Class(),this);
   }
}

//______________________________________________________________________________
void RootTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RootTrack.
      TClass *R__cl = ::RootTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTrackId", &theTrackId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePDG", &thePDG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePosition", &thePosition);
      R__insp.InspectMember(thePosition, "thePosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theDirection", &theDirection);
      R__insp.InspectMember(theDirection, "theDirection.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theKinEnergy", &theKinEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theParentTrackId", &theParentTrackId);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RootTrack(void *p) {
      return  p ? new(p) ::RootTrack : new ::RootTrack;
   }
   static void *newArray_RootTrack(Long_t nElements, void *p) {
      return p ? new(p) ::RootTrack[nElements] : new ::RootTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootTrack(void *p) {
      delete ((::RootTrack*)p);
   }
   static void deleteArray_RootTrack(void *p) {
      delete [] ((::RootTrack*)p);
   }
   static void destruct_RootTrack(void *p) {
      typedef ::RootTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RootTrack

//______________________________________________________________________________
void RootVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class RootVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RootVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(RootVertex::Class(),this);
   }
}

//______________________________________________________________________________
void RootVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RootVertex.
      TClass *R__cl = ::RootVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theVolumeName", &theVolumeName);
      R__insp.InspectMember(theVolumeName, "theVolumeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePosition", &thePosition);
      R__insp.InspectMember(thePosition, "thePosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theInelastic", &theInelastic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theQuasielastic", &theQuasielastic);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RootVertex(void *p) {
      return  p ? new(p) ::RootVertex : new ::RootVertex;
   }
   static void *newArray_RootVertex(Long_t nElements, void *p) {
      return p ? new(p) ::RootVertex[nElements] : new ::RootVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootVertex(void *p) {
      delete ((::RootVertex*)p);
   }
   static void deleteArray_RootVertex(void *p) {
      delete [] ((::RootVertex*)p);
   }
   static void destruct_RootVertex(void *p) {
      typedef ::RootVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RootVertex

//______________________________________________________________________________
void RootTrackerHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class RootTrackerHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RootTrackerHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(RootTrackerHit::Class(),this);
   }
}

//______________________________________________________________________________
void RootTrackerHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RootTrackerHit.
      TClass *R__cl = ::RootTrackerHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theEntryPoint", &theEntryPoint);
      R__insp.InspectMember(theEntryPoint, "theEntryPoint.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theExitPoint", &theExitPoint);
      R__insp.InspectMember(theExitPoint, "theExitPoint.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theMomentum", &theMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTimeOfFlight", &theTimeOfFlight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theEnergyLoss", &theEnergyLoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theParticeType", &theParticeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theDetectorId", &theDetectorId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTrackIdInHit", &theTrackIdInHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theThetaAtEntry", &theThetaAtEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thePhiAtEntry", &thePhiAtEntry);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RootTrackerHit(void *p) {
      return  p ? new(p) ::RootTrackerHit : new ::RootTrackerHit;
   }
   static void *newArray_RootTrackerHit(Long_t nElements, void *p) {
      return p ? new(p) ::RootTrackerHit[nElements] : new ::RootTrackerHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootTrackerHit(void *p) {
      delete ((::RootTrackerHit*)p);
   }
   static void deleteArray_RootTrackerHit(void *p) {
      delete [] ((::RootTrackerHit*)p);
   }
   static void destruct_RootTrackerHit(void *p) {
      typedef ::RootTrackerHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RootTrackerHit

//______________________________________________________________________________
void RootEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class RootEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RootEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(RootEvent::Class(),this);
   }
}

//______________________________________________________________________________
void RootEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RootEvent.
      TClass *R__cl = ::RootEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventID", &eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTrackCollection", (void*)&theTrackCollection);
      R__insp.InspectMember("vector<RootTrack>", (void*)&theTrackCollection, "theTrackCollection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theVertexCollection", (void*)&theVertexCollection);
      R__insp.InspectMember("vector<RootVertex>", (void*)&theVertexCollection, "theVertexCollection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theCaloHitCollection", (void*)&theCaloHitCollection);
      R__insp.InspectMember("vector<RootCaloHit>", (void*)&theCaloHitCollection, "theCaloHitCollection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theVetoHitCollection", (void*)&theVetoHitCollection);
      R__insp.InspectMember("vector<RootCaloHit>", (void*)&theVetoHitCollection, "theVetoHitCollection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theTrackerHitCollection", (void*)&theTrackerHitCollection);
      R__insp.InspectMember("vector<RootTrackerHit>", (void*)&theTrackerHitCollection, "theTrackerHitCollection.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RootEvent(void *p) {
      return  p ? new(p) ::RootEvent : new ::RootEvent;
   }
   static void *newArray_RootEvent(Long_t nElements, void *p) {
      return p ? new(p) ::RootEvent[nElements] : new ::RootEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootEvent(void *p) {
      delete ((::RootEvent*)p);
   }
   static void deleteArray_RootEvent(void *p) {
      delete [] ((::RootEvent*)p);
   }
   static void destruct_RootEvent(void *p) {
      typedef ::RootEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RootEvent

namespace ROOTDict {
   void maplEintcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOdoublegR_Dictionary();
   static void *new_maplEintcOdoublegR(void *p = 0);
   static void *newArray_maplEintcOdoublegR(Long_t size, void *p);
   static void delete_maplEintcOdoublegR(void *p);
   static void deleteArray_maplEintcOdoublegR(void *p);
   static void destruct_maplEintcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,double>*)
   {
      map<int,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,double>", -2, "prec_stl/map", 63,
                  typeid(map<int,double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,double>) );
      instance.SetNew(&new_maplEintcOdoublegR);
      instance.SetNewArray(&newArray_maplEintcOdoublegR);
      instance.SetDelete(&delete_maplEintcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEintcOdoublegR);
      instance.SetDestructor(&destruct_maplEintcOdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,double> : new map<int,double>;
   }
   static void *newArray_maplEintcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,double>[nElements] : new map<int,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOdoublegR(void *p) {
      delete ((map<int,double>*)p);
   }
   static void deleteArray_maplEintcOdoublegR(void *p) {
      delete [] ((map<int,double>*)p);
   }
   static void destruct_maplEintcOdoublegR(void *p) {
      typedef map<int,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,double>

namespace ROOTDict {
   void vectorlERootCaloHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERootCaloHitgR_Dictionary();
   static void *new_vectorlERootCaloHitgR(void *p = 0);
   static void *newArray_vectorlERootCaloHitgR(Long_t size, void *p);
   static void delete_vectorlERootCaloHitgR(void *p);
   static void deleteArray_vectorlERootCaloHitgR(void *p);
   static void destruct_vectorlERootCaloHitgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<RootCaloHit>*)
   {
      vector<RootCaloHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RootCaloHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RootCaloHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<RootCaloHit>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlERootCaloHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<RootCaloHit>) );
      instance.SetNew(&new_vectorlERootCaloHitgR);
      instance.SetNewArray(&newArray_vectorlERootCaloHitgR);
      instance.SetDelete(&delete_vectorlERootCaloHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlERootCaloHitgR);
      instance.SetDestructor(&destruct_vectorlERootCaloHitgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<RootCaloHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RootCaloHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootCaloHitgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<RootCaloHit>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlERootCaloHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootCaloHit> : new vector<RootCaloHit>;
   }
   static void *newArray_vectorlERootCaloHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootCaloHit>[nElements] : new vector<RootCaloHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootCaloHitgR(void *p) {
      delete ((vector<RootCaloHit>*)p);
   }
   static void deleteArray_vectorlERootCaloHitgR(void *p) {
      delete [] ((vector<RootCaloHit>*)p);
   }
   static void destruct_vectorlERootCaloHitgR(void *p) {
      typedef vector<RootCaloHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<RootCaloHit>

namespace ROOTDict {
   void vectorlERootTrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERootTrackgR_Dictionary();
   static void *new_vectorlERootTrackgR(void *p = 0);
   static void *newArray_vectorlERootTrackgR(Long_t size, void *p);
   static void delete_vectorlERootTrackgR(void *p);
   static void deleteArray_vectorlERootTrackgR(void *p);
   static void destruct_vectorlERootTrackgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<RootTrack>*)
   {
      vector<RootTrack> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RootTrack>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RootTrack>", -2, "prec_stl/vector", 49,
                  typeid(vector<RootTrack>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlERootTrackgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<RootTrack>) );
      instance.SetNew(&new_vectorlERootTrackgR);
      instance.SetNewArray(&newArray_vectorlERootTrackgR);
      instance.SetDelete(&delete_vectorlERootTrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlERootTrackgR);
      instance.SetDestructor(&destruct_vectorlERootTrackgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<RootTrack> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RootTrack>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootTrackgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<RootTrack>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlERootTrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootTrack> : new vector<RootTrack>;
   }
   static void *newArray_vectorlERootTrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootTrack>[nElements] : new vector<RootTrack>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootTrackgR(void *p) {
      delete ((vector<RootTrack>*)p);
   }
   static void deleteArray_vectorlERootTrackgR(void *p) {
      delete [] ((vector<RootTrack>*)p);
   }
   static void destruct_vectorlERootTrackgR(void *p) {
      typedef vector<RootTrack> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<RootTrack>

namespace ROOTDict {
   void vectorlERootTrackerHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERootTrackerHitgR_Dictionary();
   static void *new_vectorlERootTrackerHitgR(void *p = 0);
   static void *newArray_vectorlERootTrackerHitgR(Long_t size, void *p);
   static void delete_vectorlERootTrackerHitgR(void *p);
   static void deleteArray_vectorlERootTrackerHitgR(void *p);
   static void destruct_vectorlERootTrackerHitgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<RootTrackerHit>*)
   {
      vector<RootTrackerHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RootTrackerHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RootTrackerHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<RootTrackerHit>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlERootTrackerHitgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<RootTrackerHit>) );
      instance.SetNew(&new_vectorlERootTrackerHitgR);
      instance.SetNewArray(&newArray_vectorlERootTrackerHitgR);
      instance.SetDelete(&delete_vectorlERootTrackerHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlERootTrackerHitgR);
      instance.SetDestructor(&destruct_vectorlERootTrackerHitgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<RootTrackerHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RootTrackerHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootTrackerHitgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<RootTrackerHit>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlERootTrackerHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootTrackerHit> : new vector<RootTrackerHit>;
   }
   static void *newArray_vectorlERootTrackerHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootTrackerHit>[nElements] : new vector<RootTrackerHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootTrackerHitgR(void *p) {
      delete ((vector<RootTrackerHit>*)p);
   }
   static void deleteArray_vectorlERootTrackerHitgR(void *p) {
      delete [] ((vector<RootTrackerHit>*)p);
   }
   static void destruct_vectorlERootTrackerHitgR(void *p) {
      typedef vector<RootTrackerHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<RootTrackerHit>

namespace ROOTDict {
   void vectorlERootVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlERootVertexgR_Dictionary();
   static void *new_vectorlERootVertexgR(void *p = 0);
   static void *newArray_vectorlERootVertexgR(Long_t size, void *p);
   static void delete_vectorlERootVertexgR(void *p);
   static void deleteArray_vectorlERootVertexgR(void *p);
   static void destruct_vectorlERootVertexgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<RootVertex>*)
   {
      vector<RootVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<RootVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<RootVertex>", -2, "prec_stl/vector", 49,
                  typeid(vector<RootVertex>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlERootVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<RootVertex>) );
      instance.SetNew(&new_vectorlERootVertexgR);
      instance.SetNewArray(&newArray_vectorlERootVertexgR);
      instance.SetDelete(&delete_vectorlERootVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlERootVertexgR);
      instance.SetDestructor(&destruct_vectorlERootVertexgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<RootVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<RootVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootVertexgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<RootVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlERootVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootVertex> : new vector<RootVertex>;
   }
   static void *newArray_vectorlERootVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<RootVertex>[nElements] : new vector<RootVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootVertexgR(void *p) {
      delete ((vector<RootVertex>*)p);
   }
   static void deleteArray_vectorlERootVertexgR(void *p) {
      delete [] ((vector<RootVertex>*)p);
   }
   static void destruct_vectorlERootVertexgR(void *p) {
      typedef vector<RootVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<RootVertex>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* /home/william/aiglon/geant4/HEPDSW/build/DataFormatDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataFormatDict();

extern "C" void G__set_cpp_environmentDataFormatDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootCaloHit.hh");
  G__add_compiledheader("/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootEvent.hh");
  G__add_compiledheader("/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootTrack.hh");
  G__add_compiledheader("/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootTrackerHit.hh");
  G__add_compiledheader("/home/william/aiglon/geant4/HEPDSW/source/Dataformats/include/RootVertex.hh");
  G__cpp_reset_tagtableDataFormatDict();
}
#include <new>
extern "C" int G__cpp_dllrevDataFormatDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* RootCaloHit */
static int G__DataFormatDict_419_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootCaloHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootCaloHit[n];
     } else {
       p = new((void*) gvp) RootCaloHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootCaloHit;
     } else {
       p = new((void*) gvp) RootCaloHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootCaloHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootCaloHit(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, *((map<int,double>*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) RootCaloHit(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, *((map<int,double>*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootCaloHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootCaloHit(*(RootCaloHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) RootCaloHit(*(RootCaloHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RootCaloHit*) G__getstructoffset())->GetTotalEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootCaloHit*) G__getstructoffset())->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((RootCaloHit*) G__getstructoffset())->GetParticleList();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((RootCaloHit*) G__getstructoffset())->GetEdep((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RootCaloHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootCaloHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RootCaloHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RootCaloHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootCaloHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootCaloHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootCaloHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootCaloHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_419_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootCaloHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RootCaloHit G__TRootCaloHit;
static int G__DataFormatDict_419_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RootCaloHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RootCaloHit*) (soff+(sizeof(RootCaloHit)*i)))->~G__TRootCaloHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RootCaloHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RootCaloHit*) (soff))->~G__TRootCaloHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatDict_419_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootCaloHit* dest = (RootCaloHit*) G__getstructoffset();
   *dest = *(RootCaloHit*) libp->para[0].ref;
   const RootCaloHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RootTrack */
static int G__DataFormatDict_468_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootTrack[n];
     } else {
       p = new((void*) gvp) RootTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootTrack;
     } else {
       p = new((void*) gvp) RootTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootTrack(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) RootTrack(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootTrack(*(RootTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) RootTrack(*(RootTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootTrack*) G__getstructoffset())->GetTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootTrack*) G__getstructoffset())->GetPDG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RootTrack*) G__getstructoffset())->GetDirection();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RootTrack*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrack*) G__getstructoffset())->GetKinEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootTrack*) G__getstructoffset())->GetParentTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RootTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RootTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RootTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_468_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RootTrack G__TRootTrack;
static int G__DataFormatDict_468_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RootTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RootTrack*) (soff+(sizeof(RootTrack)*i)))->~G__TRootTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RootTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RootTrack*) (soff))->~G__TRootTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatDict_468_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrack* dest = (RootTrack*) G__getstructoffset();
   *dest = *(RootTrack*) libp->para[0].ref;
   const RootTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RootVertex */
static int G__DataFormatDict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootVertex[n];
     } else {
       p = new((void*) gvp) RootVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootVertex;
     } else {
       p = new((void*) gvp) RootVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootVertex(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3])));
   } else {
     p = new((void*) gvp) RootVertex(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootVertex(*(RootVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) RootVertex(*(RootVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((RootVertex*) G__getstructoffset())->GetVolumeName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RootVertex*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RootVertex*) G__getstructoffset())->IsQuasiElastic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((RootVertex*) G__getstructoffset())->IsInelastic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RootVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RootVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RootVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_469_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RootVertex G__TRootVertex;
static int G__DataFormatDict_469_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RootVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RootVertex*) (soff+(sizeof(RootVertex)*i)))->~G__TRootVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RootVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RootVertex*) (soff))->~G__TRootVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatDict_469_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootVertex* dest = (RootVertex*) G__getstructoffset();
   *dest = *(RootVertex*) libp->para[0].ref;
   const RootVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RootTrackerHit */
static int G__DataFormatDict_470_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrackerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootTrackerHit[n];
     } else {
       p = new((void*) gvp) RootTrackerHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootTrackerHit;
     } else {
       p = new((void*) gvp) RootTrackerHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrackerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootTrackerHit(
*((TVector3*) G__int(libp->para[0])), *((TVector3*) G__int(libp->para[1]))
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (unsigned int) G__int(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9]));
   } else {
     p = new((void*) gvp) RootTrackerHit(
*((TVector3*) G__int(libp->para[0])), *((TVector3*) G__int(libp->para[1]))
, (float) G__double(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4]), (int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (unsigned int) G__int(libp->para[7])
, (float) G__double(libp->para[8]), (float) G__double(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrackerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootTrackerHit(*(RootTrackerHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) RootTrackerHit(*(RootTrackerHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RootTrackerHit*) G__getstructoffset())->GetEntryPoint();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((RootTrackerHit*) G__getstructoffset())->GetExitPoint();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrackerHit*) G__getstructoffset())->GetMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrackerHit*) G__getstructoffset())->GetToF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrackerHit*) G__getstructoffset())->GetELoss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootTrackerHit*) G__getstructoffset())->GetParticleType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RootTrackerHit*) G__getstructoffset())->GetDetectorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((RootTrackerHit*) G__getstructoffset())->GetTrackId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrackerHit*) G__getstructoffset())->GetThetaAtEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((RootTrackerHit*) G__getstructoffset())->GetPhiAtEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RootTrackerHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrackerHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RootTrackerHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RootTrackerHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootTrackerHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrackerHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootTrackerHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootTrackerHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_470_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootTrackerHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RootTrackerHit G__TRootTrackerHit;
static int G__DataFormatDict_470_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RootTrackerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RootTrackerHit*) (soff+(sizeof(RootTrackerHit)*i)))->~G__TRootTrackerHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RootTrackerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RootTrackerHit*) (soff))->~G__TRootTrackerHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatDict_470_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootTrackerHit* dest = (RootTrackerHit*) G__getstructoffset();
   *dest = *(RootTrackerHit*) libp->para[0].ref;
   const RootTrackerHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RootEvent */
static int G__DataFormatDict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootEvent[n];
     } else {
       p = new((void*) gvp) RootEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RootEvent;
     } else {
       p = new((void*) gvp) RootEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootEvent(
(int) G__int(libp->para[0]), *((vector<RootTrack>*) G__int(libp->para[1]))
, *((vector<RootVertex>*) G__int(libp->para[2])), *((vector<RootCaloHit>*) G__int(libp->para[3]))
, *((vector<RootCaloHit>*) G__int(libp->para[4])), *((vector<RootTrackerHit>*) G__int(libp->para[5])));
   } else {
     p = new((void*) gvp) RootEvent(
(int) G__int(libp->para[0]), *((vector<RootTrack>*) G__int(libp->para[1]))
, *((vector<RootVertex>*) G__int(libp->para[2])), *((vector<RootCaloHit>*) G__int(libp->para[3]))
, *((vector<RootCaloHit>*) G__int(libp->para[4])), *((vector<RootTrackerHit>*) G__int(libp->para[5])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RootEvent(*(RootEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) RootEvent(*(RootEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((RootEvent*) G__getstructoffset())->EventID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack>* pobj;
         vector<RootTrack> xobj = ((RootEvent*) G__getstructoffset())->GetTracks();
         pobj = new vector<RootTrack>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex>* pobj;
         vector<RootVertex> xobj = ((RootEvent*) G__getstructoffset())->GetVertex();
         pobj = new vector<RootVertex>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit>* pobj;
         vector<RootCaloHit> xobj = ((RootEvent*) G__getstructoffset())->GetCaloHit();
         pobj = new vector<RootCaloHit>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit>* pobj;
         vector<RootCaloHit> xobj = ((RootEvent*) G__getstructoffset())->GetVetoHit();
         pobj = new vector<RootCaloHit>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit>* pobj;
         vector<RootTrackerHit> xobj = ((RootEvent*) G__getstructoffset())->GetTrackerHit();
         pobj = new vector<RootTrackerHit>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetEventID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetTracks(*((vector<RootTrack>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetVertex(*((vector<RootVertex>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetCaloHit(*((vector<RootCaloHit>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetVetoHit(*((vector<RootCaloHit>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->SetTrackerHit(*((vector<RootTrackerHit>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RootEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RootEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RootEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RootEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RootEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_471_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RootEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RootEvent G__TRootEvent;
static int G__DataFormatDict_471_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RootEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RootEvent*) (soff+(sizeof(RootEvent)*i)))->~G__TRootEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RootEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RootEvent*) (soff))->~G__TRootEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatDict_471_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RootEvent* dest = (RootEvent*) G__getstructoffset();
   *dest = *(RootEvent*) libp->para[0].ref;
   const RootEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<RootTrack,allocator<RootTrack> > */
static int G__DataFormatDict_473_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::reference obj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->at((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::const_reference obj = ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->at((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::iterator* pobj;
         vector<RootTrack,allocator<RootTrack> >::iterator xobj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->begin();
         pobj = new vector<RootTrack,allocator<RootTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::iterator* pobj;
         vector<RootTrack,allocator<RootTrack> >::iterator xobj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->end();
         pobj = new vector<RootTrack,allocator<RootTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::reverse_iterator* pobj;
         vector<RootTrack,allocator<RootTrack> >::reverse_iterator xobj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->rbegin();
         pobj = new vector<RootTrack,allocator<RootTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::reverse_iterator* pobj;
         vector<RootTrack,allocator<RootTrack> >::reverse_iterator xobj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->rend();
         pobj = new vector<RootTrack,allocator<RootTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->resize((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->resize((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]), *((RootTrack*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::reference obj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->operator[]((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::const_reference obj = ((const vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->operator[]((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrack,allocator<RootTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrack,allocator<RootTrack> >[n];
     } else {
       p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrack,allocator<RootTrack> >;
     } else {
       p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrack,allocator<RootTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrack,allocator<RootTrack> >((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]), *(RootTrack*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]), *(RootTrack*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrack,allocator<RootTrack> >((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrack,allocator<RootTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootTrack,allocator<RootTrack> >(*(vector<RootTrack,allocator<RootTrack> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >(*(vector<RootTrack,allocator<RootTrack> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrack,allocator<RootTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootTrack,allocator<RootTrack> >(*((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<RootTrack,allocator<RootTrack> >(*((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<RootTrack,allocator<RootTrack> >& obj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->operator=(*(vector<RootTrack,allocator<RootTrack> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->reserve((vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootTrack& obj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootTrack& obj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->push_back(*(RootTrack*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->swap(*(vector<RootTrack,allocator<RootTrack> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrack,allocator<RootTrack> >::iterator* pobj;
         vector<RootTrack,allocator<RootTrack> >::iterator xobj = ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->insert(*((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[0])), *(RootTrack*) libp->para[1].ref);
         pobj = new vector<RootTrack,allocator<RootTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->insert(*((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[0])), *((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[1]))
, *((vector<RootTrack,allocator<RootTrack> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->insert(*((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[0])), (vector<RootTrack,allocator<RootTrack> >::size_type) G__int(libp->para[1])
, *(RootTrack*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->erase(*((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->erase(*((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[0])), *((vector<RootTrack,allocator<RootTrack> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_473_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrack,allocator<RootTrack> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<RootTrack,allocator<RootTrack> > G__TvectorlERootTrackcOallocatorlERootTrackgRsPgR;
static int G__DataFormatDict_473_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<RootTrack,allocator<RootTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<RootTrack,allocator<RootTrack> >*) (soff+(sizeof(vector<RootTrack,allocator<RootTrack> >)*i)))->~G__TvectorlERootTrackcOallocatorlERootTrackgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<RootTrack,allocator<RootTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<RootTrack,allocator<RootTrack> >*) (soff))->~G__TvectorlERootTrackcOallocatorlERootTrackgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<RootVertex,allocator<RootVertex> > */
static int G__DataFormatDict_477_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::reference obj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->at((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::const_reference obj = ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->at((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::iterator* pobj;
         vector<RootVertex,allocator<RootVertex> >::iterator xobj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<RootVertex,allocator<RootVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::iterator* pobj;
         vector<RootVertex,allocator<RootVertex> >::iterator xobj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->end();
         pobj = new vector<RootVertex,allocator<RootVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::reverse_iterator* pobj;
         vector<RootVertex,allocator<RootVertex> >::reverse_iterator xobj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<RootVertex,allocator<RootVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::reverse_iterator* pobj;
         vector<RootVertex,allocator<RootVertex> >::reverse_iterator xobj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<RootVertex,allocator<RootVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->resize((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->resize((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]), *((RootVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::reference obj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->operator[]((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::const_reference obj = ((const vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->operator[]((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootVertex,allocator<RootVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootVertex,allocator<RootVertex> >[n];
     } else {
       p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootVertex,allocator<RootVertex> >;
     } else {
       p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootVertex,allocator<RootVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootVertex,allocator<RootVertex> >((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]), *(RootVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]), *(RootVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootVertex,allocator<RootVertex> >((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootVertex,allocator<RootVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootVertex,allocator<RootVertex> >(*(vector<RootVertex,allocator<RootVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >(*(vector<RootVertex,allocator<RootVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootVertex,allocator<RootVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootVertex,allocator<RootVertex> >(*((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<RootVertex,allocator<RootVertex> >(*((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<RootVertex,allocator<RootVertex> >& obj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->operator=(*(vector<RootVertex,allocator<RootVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->reserve((vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootVertex& obj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootVertex& obj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->push_back(*(RootVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->swap(*(vector<RootVertex,allocator<RootVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootVertex,allocator<RootVertex> >::iterator* pobj;
         vector<RootVertex,allocator<RootVertex> >::iterator xobj = ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->insert(*((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[0])), *(RootVertex*) libp->para[1].ref);
         pobj = new vector<RootVertex,allocator<RootVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->insert(*((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[0])), *((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<RootVertex,allocator<RootVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->insert(*((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[0])), (vector<RootVertex,allocator<RootVertex> >::size_type) G__int(libp->para[1])
, *(RootVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->erase(*((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->erase(*((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[0])), *((vector<RootVertex,allocator<RootVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_477_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootVertex,allocator<RootVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<RootVertex,allocator<RootVertex> > G__TvectorlERootVertexcOallocatorlERootVertexgRsPgR;
static int G__DataFormatDict_477_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<RootVertex,allocator<RootVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<RootVertex,allocator<RootVertex> >*) (soff+(sizeof(vector<RootVertex,allocator<RootVertex> >)*i)))->~G__TvectorlERootVertexcOallocatorlERootVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<RootVertex,allocator<RootVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<RootVertex,allocator<RootVertex> >*) (soff))->~G__TvectorlERootVertexcOallocatorlERootVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<RootCaloHit,allocator<RootCaloHit> > */
static int G__DataFormatDict_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::reference obj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->at((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::const_reference obj = ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->at((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator* pobj;
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator xobj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->begin();
         pobj = new vector<RootCaloHit,allocator<RootCaloHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator* pobj;
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator xobj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->end();
         pobj = new vector<RootCaloHit,allocator<RootCaloHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator* pobj;
         vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator xobj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator* pobj;
         vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator xobj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->rend();
         pobj = new vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->resize((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->resize((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]), *((RootCaloHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::reference obj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->operator[]((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::const_reference obj = ((const vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->operator[]((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootCaloHit,allocator<RootCaloHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootCaloHit,allocator<RootCaloHit> >[n];
     } else {
       p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootCaloHit,allocator<RootCaloHit> >;
     } else {
       p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootCaloHit,allocator<RootCaloHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootCaloHit,allocator<RootCaloHit> >((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]), *(RootCaloHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]), *(RootCaloHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootCaloHit,allocator<RootCaloHit> >((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootCaloHit,allocator<RootCaloHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootCaloHit,allocator<RootCaloHit> >(*(vector<RootCaloHit,allocator<RootCaloHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >(*(vector<RootCaloHit,allocator<RootCaloHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootCaloHit,allocator<RootCaloHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootCaloHit,allocator<RootCaloHit> >(*((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[0])), *((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<RootCaloHit,allocator<RootCaloHit> >(*((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[0])), *((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<RootCaloHit,allocator<RootCaloHit> >& obj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->operator=(*(vector<RootCaloHit,allocator<RootCaloHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->reserve((vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootCaloHit& obj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootCaloHit& obj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->push_back(*(RootCaloHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->swap(*(vector<RootCaloHit,allocator<RootCaloHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator* pobj;
         vector<RootCaloHit,allocator<RootCaloHit> >::iterator xobj = ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->insert(*((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[0])), *(RootCaloHit*) libp->para[1].ref);
         pobj = new vector<RootCaloHit,allocator<RootCaloHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->insert(*((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[0])), *((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->insert(*((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[0])), (vector<RootCaloHit,allocator<RootCaloHit> >::size_type) G__int(libp->para[1])
, *(RootCaloHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->erase(*((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->erase(*((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[0])), *((vector<RootCaloHit,allocator<RootCaloHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_481_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootCaloHit,allocator<RootCaloHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<RootCaloHit,allocator<RootCaloHit> > G__TvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR;
static int G__DataFormatDict_481_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<RootCaloHit,allocator<RootCaloHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<RootCaloHit,allocator<RootCaloHit> >*) (soff+(sizeof(vector<RootCaloHit,allocator<RootCaloHit> >)*i)))->~G__TvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<RootCaloHit,allocator<RootCaloHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<RootCaloHit,allocator<RootCaloHit> >*) (soff))->~G__TvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<RootTrackerHit,allocator<RootTrackerHit> > */
static int G__DataFormatDict_485_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reference obj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->at((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::const_reference obj = ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->at((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator* pobj;
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator xobj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->begin();
         pobj = new vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator* pobj;
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator xobj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->end();
         pobj = new vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator* pobj;
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator xobj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator* pobj;
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator xobj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->rend();
         pobj = new vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->resize((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->resize((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]), *((RootTrackerHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::reference obj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->operator[]((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::const_reference obj = ((const vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->operator[]((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrackerHit,allocator<RootTrackerHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrackerHit,allocator<RootTrackerHit> >[n];
     } else {
       p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrackerHit,allocator<RootTrackerHit> >;
     } else {
       p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrackerHit,allocator<RootTrackerHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrackerHit,allocator<RootTrackerHit> >((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]), *(RootTrackerHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]), *(RootTrackerHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<RootTrackerHit,allocator<RootTrackerHit> >((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrackerHit,allocator<RootTrackerHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootTrackerHit,allocator<RootTrackerHit> >(*(vector<RootTrackerHit,allocator<RootTrackerHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >(*(vector<RootTrackerHit,allocator<RootTrackerHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<RootTrackerHit,allocator<RootTrackerHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<RootTrackerHit,allocator<RootTrackerHit> >(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[0])), *((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<RootTrackerHit,allocator<RootTrackerHit> >(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[0])), *((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<RootTrackerHit,allocator<RootTrackerHit> >& obj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->operator=(*(vector<RootTrackerHit,allocator<RootTrackerHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->reserve((vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootTrackerHit& obj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RootTrackerHit& obj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->push_back(*(RootTrackerHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->swap(*(vector<RootTrackerHit,allocator<RootTrackerHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator* pobj;
         vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator xobj = ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->insert(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[0])), *(RootTrackerHit*) libp->para[1].ref);
         pobj = new vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->insert(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[0])), *((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->insert(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[0])), (vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type) G__int(libp->para[1])
, *(RootTrackerHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->erase(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->erase(*((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[0])), *((vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatDict_485_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<RootTrackerHit,allocator<RootTrackerHit> > G__TvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR;
static int G__DataFormatDict_485_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<RootTrackerHit,allocator<RootTrackerHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) (soff+(sizeof(vector<RootTrackerHit,allocator<RootTrackerHit> >)*i)))->~G__TvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<RootTrackerHit,allocator<RootTrackerHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<RootTrackerHit,allocator<RootTrackerHit> >*) (soff))->~G__TvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* RootCaloHit */

/* RootTrack */

/* RootVertex */

/* RootTrackerHit */

/* RootEvent */

/* vector<RootTrack,allocator<RootTrack> > */

/* vector<RootVertex,allocator<RootVertex> > */

/* vector<RootCaloHit,allocator<RootCaloHit> > */

/* vector<RootTrackerHit,allocator<RootTrackerHit> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataFormatDict {
 public:
  G__Sizep2memfuncDataFormatDict(): p(&G__Sizep2memfuncDataFormatDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataFormatDict::*p)();
};

size_t G__get_sizep2memfuncDataFormatDict()
{
  G__Sizep2memfuncDataFormatDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataFormatDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit))) {
     RootCaloHit *G__Lderived;
     G__Lderived=(RootCaloHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),G__get_linked_tagnum(&G__DataFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack))) {
     RootTrack *G__Lderived;
     G__Lderived=(RootTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),G__get_linked_tagnum(&G__DataFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex))) {
     RootVertex *G__Lderived;
     G__Lderived=(RootVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),G__get_linked_tagnum(&G__DataFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit))) {
     RootTrackerHit *G__Lderived;
     G__Lderived=(RootTrackerHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),G__get_linked_tagnum(&G__DataFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent))) {
     RootEvent *G__Lderived;
     G__Lderived=(RootEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent),G__get_linked_tagnum(&G__DataFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataFormatDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__DataFormatDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RootTrack>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),1,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack),257,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RootVertex>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),1,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex),257,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RootCaloHit>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),1,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit),257,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RootTrackerHit>",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),1,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit),257,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* RootCaloHit */
static void G__setup_memvarRootCaloHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit));
   { RootCaloHit *p; p=(RootCaloHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"theDet=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"theTotalEdep=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"theEdep=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"theParticleList=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RootTrack */
static void G__setup_memvarRootTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack));
   { RootTrack *p; p=(RootTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"theTrackId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"thePDG=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TVector3),-1,-1,4,"thePosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TVector3),-1,-1,4,"theDirection=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theKinEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"theParentTrackId=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RootVertex */
static void G__setup_memvarRootVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex));
   { RootVertex *p; p=(RootVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TString),-1,-1,4,"theVolumeName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TVector3),-1,-1,4,"thePosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"theInelastic=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"theQuasielastic=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RootTrackerHit */
static void G__setup_memvarRootTrackerHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit));
   { RootTrackerHit *p; p=(RootTrackerHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TVector3),-1,-1,4,"theEntryPoint=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TVector3),-1,-1,4,"theExitPoint=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theMomentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theTimeOfFlight=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theEnergyLoss=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"theParticeType=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"theDetectorId=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"theTrackIdInHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"theThetaAtEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"thePhiAtEntry=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RootEvent */
static void G__setup_memvarRootEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent));
   { RootEvent *p; p=(RootEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"eventID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR),G__defined_typename("vector<RootTrack>"),-1,4,"theTrackCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR),G__defined_typename("vector<RootVertex>"),-1,4,"theVertexCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR),G__defined_typename("vector<RootCaloHit>"),-1,4,"theCaloHitCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR),G__defined_typename("vector<RootCaloHit>"),-1,4,"theVetoHitCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR),G__defined_typename("vector<RootTrackerHit>"),-1,4,"theTrackerHitCollection=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<RootTrack,allocator<RootTrack> > */
static void G__setup_memvarvectorlERootTrackcOallocatorlERootTrackgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   { vector<RootTrack,allocator<RootTrack> > *p; p=(vector<RootTrack,allocator<RootTrack> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<RootVertex,allocator<RootVertex> > */
static void G__setup_memvarvectorlERootVertexcOallocatorlERootVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   { vector<RootVertex,allocator<RootVertex> > *p; p=(vector<RootVertex,allocator<RootVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<RootCaloHit,allocator<RootCaloHit> > */
static void G__setup_memvarvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   { vector<RootCaloHit,allocator<RootCaloHit> > *p; p=(vector<RootCaloHit,allocator<RootCaloHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<RootTrackerHit,allocator<RootTrackerHit> > */
static void G__setup_memvarvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   { vector<RootTrackerHit,allocator<RootTrackerHit> > *p; p=(vector<RootTrackerHit,allocator<RootTrackerHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataFormatDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRootCaloHit(void) {
   /* RootCaloHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit));
   G__memfunc_setup("RootCaloHit",1096,G__DataFormatDict_419_0_1, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootCaloHit",1096,G__DataFormatDict_419_0_2, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 0, 3, 1, 1, 0, 
"i - - 0 - aDetID d - - 0 - aTotalEdep "
"u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 0 - aEdep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootCaloHit",1096,G__DataFormatDict_419_0_3, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 0, 1, 1, 1, 0, "u 'RootCaloHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalEdep",1186,G__DataFormatDict_419_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolume",920,G__DataFormatDict_419_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleList",1520,G__DataFormatDict_419_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdep",670,G__DataFormatDict_419_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aTkID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatDict_419_0_8, 85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RootCaloHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatDict_419_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootCaloHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatDict_419_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RootCaloHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatDict_419_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RootCaloHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatDict_419_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatDict_419_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootCaloHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatDict_419_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootCaloHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatDict_419_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootCaloHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatDict_419_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootCaloHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RootCaloHit", 1222, G__DataFormatDict_419_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatDict_419_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 1, 1, 1, 1, 0, "u 'RootCaloHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootTrack(void) {
   /* RootTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack));
   G__memfunc_setup("RootTrack",921,G__DataFormatDict_468_0_1, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootTrack",921,G__DataFormatDict_468_0_2, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 0, 6, 1, 1, 0, 
"i - - 0 - aTkId i - - 0 - aPDG "
"u 'TVector3' - 0 - aPos u 'TVector3' - 0 - aDir "
"f - - 0 - aKinE i - - 0 - aPTkId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootTrack",921,G__DataFormatDict_468_0_3, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 0, 1, 1, 1, 0, "u 'RootTrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackID",930,G__DataFormatDict_468_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPDG",507,G__DataFormatDict_468_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,G__DataFormatDict_468_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__DataFormatDict_468_0_7, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKinEnergy",1196,G__DataFormatDict_468_0_8, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParentTrackID",1548,G__DataFormatDict_468_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatDict_468_0_10, 85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RootTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatDict_468_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatDict_468_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RootTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatDict_468_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RootTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatDict_468_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatDict_468_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatDict_468_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatDict_468_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatDict_468_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RootTrack", 1047, G__DataFormatDict_468_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatDict_468_0_23, (int) ('u'), G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 1, 1, 1, 1, 0, "u 'RootTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootVertex(void) {
   /* RootVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex));
   G__memfunc_setup("RootVertex",1058,G__DataFormatDict_469_0_1, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootVertex",1058,G__DataFormatDict_469_0_2, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 0, 4, 1, 1, 0, 
"g - - 0 - aQuaiselastic g - - 0 - aInelastic "
"u 'TString' - 0 - aVolumeName u 'TVector3' - 0 - aPosition", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootVertex",1058,G__DataFormatDict_469_0_3, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 0, 1, 1, 1, 0, "u 'RootVertex' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolumeName",1305,G__DataFormatDict_469_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__DataFormatDict_469_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsQuasiElastic",1412,G__DataFormatDict_469_0_6, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInelastic",1112,G__DataFormatDict_469_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatDict_469_0_8, 85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RootVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatDict_469_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatDict_469_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RootVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatDict_469_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RootVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatDict_469_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatDict_469_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatDict_469_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatDict_469_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatDict_469_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RootVertex", 1184, G__DataFormatDict_469_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatDict_469_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 1, 1, 1, 1, 0, "u 'RootVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootTrackerHit(void) {
   /* RootTrackerHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit));
   G__memfunc_setup("RootTrackerHit",1429,G__DataFormatDict_470_0_1, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootTrackerHit",1429,G__DataFormatDict_470_0_2, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 0, 10, 1, 1, 0, 
"u 'TVector3' - 0 - aEntry u 'TVector3' - 0 - aExit "
"f - - 0 - aMom f - - 0 - aToF "
"f - - 0 - aEloss i - - 0 - aPDG "
"h - - 0 - aID h - - 0 - atkID "
"f - - 0 - aTheta f - - 0 - aPhi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootTrackerHit",1429,G__DataFormatDict_470_0_3, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 0, 1, 1, 1, 0, "u 'RootTrackerHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryPoint",1340,G__DataFormatDict_470_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExitPoint",1220,G__DataFormatDict_470_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__DataFormatDict_470_0_6, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetToF",553,G__DataFormatDict_470_0_7, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetELoss",774,G__DataFormatDict_470_0_8, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleType",1526,G__DataFormatDict_470_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorId",1287,G__DataFormatDict_470_0_10, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackId",962,G__DataFormatDict_470_0_11, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaAtEntry",1501,G__DataFormatDict_470_0_12, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiAtEntry",1288,G__DataFormatDict_470_0_13, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatDict_470_0_14, 85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RootTrackerHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatDict_470_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrackerHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatDict_470_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RootTrackerHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatDict_470_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RootTrackerHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatDict_470_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatDict_470_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrackerHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatDict_470_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootTrackerHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatDict_470_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootTrackerHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatDict_470_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootTrackerHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RootTrackerHit", 1555, G__DataFormatDict_470_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatDict_470_0_27, (int) ('u'), G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 1, 1, 1, 1, 0, "u 'RootTrackerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootEvent(void) {
   /* RootEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent));
   G__memfunc_setup("RootEvent",934,G__DataFormatDict_471_0_1, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootEvent",934,G__DataFormatDict_471_0_2, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent), -1, 0, 6, 1, 1, 0, 
"i - - 0 - aEventID u 'vector<RootTrack,allocator<RootTrack> >' 'vector<RootTrack>' 0 - aTracks "
"u 'vector<RootVertex,allocator<RootVertex> >' 'vector<RootVertex>' 0 - aVertex u 'vector<RootCaloHit,allocator<RootCaloHit> >' 'vector<RootCaloHit>' 0 - aCaloHit "
"u 'vector<RootCaloHit,allocator<RootCaloHit> >' 'vector<RootCaloHit>' 0 - aVetoHit u 'vector<RootTrackerHit,allocator<RootTrackerHit> >' 'vector<RootTrackerHit>' 0 - aTkHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RootEvent",934,G__DataFormatDict_471_0_3, 105, G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent), -1, 0, 1, 1, 1, 0, "u 'RootEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventID",655,G__DataFormatDict_471_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracks",904,G__DataFormatDict_471_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), G__defined_typename("vector<RootTrack>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__DataFormatDict_471_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), G__defined_typename("vector<RootVertex>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCaloHit",964,G__DataFormatDict_471_0_7, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), G__defined_typename("vector<RootCaloHit>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVetoHit",995,G__DataFormatDict_471_0_8, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), G__defined_typename("vector<RootCaloHit>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackerHit",1297,G__DataFormatDict_471_0_9, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), G__defined_typename("vector<RootTrackerHit>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventID",955,G__DataFormatDict_471_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - aEventID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTracks",916,G__DataFormatDict_471_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrack,allocator<RootTrack> >' 'vector<RootTrack>' 0 - aTracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertex",938,G__DataFormatDict_471_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootVertex,allocator<RootVertex> >' 'vector<RootVertex>' 0 - aVertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloHit",976,G__DataFormatDict_471_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >' 'vector<RootCaloHit>' 0 - aCaloHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVetoHit",1007,G__DataFormatDict_471_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >' 'vector<RootCaloHit>' 0 - aVetoHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackerHit",1309,G__DataFormatDict_471_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrackerHit,allocator<RootTrackerHit> >' 'vector<RootTrackerHit>' 0 - aTrackerHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatDict_471_0_16, 85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RootEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatDict_471_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatDict_471_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RootEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatDict_471_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RootEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatDict_471_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatDict_471_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatDict_471_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatDict_471_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RootEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatDict_471_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RootEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RootEvent", 1060, G__DataFormatDict_471_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatDict_471_0_29, (int) ('u'), G__get_linked_tagnum(&G__DataFormatDictLN_RootEvent), -1, 1, 1, 1, 1, 0, "u 'RootEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootTrackcOallocatorlERootTrackgRsPgR(void) {
   /* vector<RootTrack,allocator<RootTrack> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatDict_473_0_1, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatDict_473_0_2, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatDict_473_0_3, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatDict_473_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatDict_473_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatDict_473_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatDict_473_0_7, 107, -1, G__defined_typename("vector<RootTrack,allocator<RootTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatDict_473_0_8, 107, -1, G__defined_typename("vector<RootTrack,allocator<RootTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_473_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_473_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - sz u 'RootTrack' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatDict_473_0_11, 107, -1, G__defined_typename("vector<RootTrack,allocator<RootTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatDict_473_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_473_0_13, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_473_0_14, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), G__defined_typename("vector<RootTrack,allocator<RootTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrack,allocator<RootTrack> >",3782,G__DataFormatDict_473_0_15, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrack,allocator<RootTrack> >",3782,G__DataFormatDict_473_0_16, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n u 'RootTrack' - 11 'RootTrack()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrack,allocator<RootTrack> >",3782,G__DataFormatDict_473_0_17, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<RootTrack,allocator<RootTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrack,allocator<RootTrack> >",3782,G__DataFormatDict_473_0_18, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' 'vector<RootTrack,allocator<RootTrack> >::const_iterator' 10 - first u 'vector<RootTrack,allocator<RootTrack> >::iterator' 'vector<RootTrack,allocator<RootTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatDict_473_0_19, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<RootTrack,allocator<RootTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatDict_473_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatDict_473_0_21, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatDict_473_0_22, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatDict_473_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RootTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatDict_473_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrack,allocator<RootTrack> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_473_0_25, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - position u 'RootTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_473_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - position u 'vector<RootTrack,allocator<RootTrack> >::iterator' 'vector<RootTrack,allocator<RootTrack> >::const_iterator' 10 - first "
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' 'vector<RootTrack,allocator<RootTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_473_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - position k - 'vector<RootTrack,allocator<RootTrack> >::size_type' 0 - n "
"u 'RootTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatDict_473_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_473_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_473_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - first u 'vector<RootTrack,allocator<RootTrack> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatDict_473_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<RootTrack,allocator<RootTrack> >", 3908, G__DataFormatDict_473_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootVertexcOallocatorlERootVertexgRsPgR(void) {
   /* vector<RootVertex,allocator<RootVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatDict_477_0_1, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatDict_477_0_2, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatDict_477_0_3, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatDict_477_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatDict_477_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatDict_477_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatDict_477_0_7, 107, -1, G__defined_typename("vector<RootVertex,allocator<RootVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatDict_477_0_8, 107, -1, G__defined_typename("vector<RootVertex,allocator<RootVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_477_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_477_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - sz u 'RootVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatDict_477_0_11, 107, -1, G__defined_typename("vector<RootVertex,allocator<RootVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatDict_477_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_477_0_13, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_477_0_14, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), G__defined_typename("vector<RootVertex,allocator<RootVertex> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootVertex,allocator<RootVertex> >",4056,G__DataFormatDict_477_0_15, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootVertex,allocator<RootVertex> >",4056,G__DataFormatDict_477_0_16, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n u 'RootVertex' - 11 'RootVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootVertex,allocator<RootVertex> >",4056,G__DataFormatDict_477_0_17, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<RootVertex,allocator<RootVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootVertex,allocator<RootVertex> >",4056,G__DataFormatDict_477_0_18, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' 'vector<RootVertex,allocator<RootVertex> >::const_iterator' 10 - first u 'vector<RootVertex,allocator<RootVertex> >::iterator' 'vector<RootVertex,allocator<RootVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatDict_477_0_19, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<RootVertex,allocator<RootVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatDict_477_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatDict_477_0_21, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatDict_477_0_22, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatDict_477_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RootVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatDict_477_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootVertex,allocator<RootVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_477_0_25, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - position u 'RootVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_477_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - position u 'vector<RootVertex,allocator<RootVertex> >::iterator' 'vector<RootVertex,allocator<RootVertex> >::const_iterator' 10 - first "
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' 'vector<RootVertex,allocator<RootVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_477_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - position k - 'vector<RootVertex,allocator<RootVertex> >::size_type' 0 - n "
"u 'RootVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatDict_477_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_477_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_477_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - first u 'vector<RootVertex,allocator<RootVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatDict_477_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<RootVertex,allocator<RootVertex> >", 4182, G__DataFormatDict_477_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR(void) {
   /* vector<RootCaloHit,allocator<RootCaloHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatDict_481_0_1, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatDict_481_0_2, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatDict_481_0_3, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatDict_481_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatDict_481_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatDict_481_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatDict_481_0_7, 107, -1, G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatDict_481_0_8, 107, -1, G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_481_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_481_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - sz u 'RootCaloHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatDict_481_0_11, 107, -1, G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatDict_481_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_481_0_13, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_481_0_14, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), G__defined_typename("vector<RootCaloHit,allocator<RootCaloHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootCaloHit,allocator<RootCaloHit> >",4132,G__DataFormatDict_481_0_15, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootCaloHit,allocator<RootCaloHit> >",4132,G__DataFormatDict_481_0_16, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n u 'RootCaloHit' - 11 'RootCaloHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootCaloHit,allocator<RootCaloHit> >",4132,G__DataFormatDict_481_0_17, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootCaloHit,allocator<RootCaloHit> >",4132,G__DataFormatDict_481_0_18, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' 'vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator' 10 - first u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' 'vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatDict_481_0_19, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatDict_481_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatDict_481_0_21, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatDict_481_0_22, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootCaloHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatDict_481_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RootCaloHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatDict_481_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_481_0_25, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - position u 'RootCaloHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_481_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - position u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' 'vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator' 10 - first "
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' 'vector<RootCaloHit,allocator<RootCaloHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_481_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - position k - 'vector<RootCaloHit,allocator<RootCaloHit> >::size_type' 0 - n "
"u 'RootCaloHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatDict_481_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_481_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_481_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - first u 'vector<RootCaloHit,allocator<RootCaloHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatDict_481_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<RootCaloHit,allocator<RootCaloHit> >", 4258, G__DataFormatDict_481_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR(void) {
   /* vector<RootTrackerHit,allocator<RootTrackerHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatDict_485_0_1, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatDict_485_0_2, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatDict_485_0_3, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatDict_485_0_4, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatDict_485_0_5, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatDict_485_0_6, 117, G__get_linked_tagnum(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatDict_485_0_7, 107, -1, G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatDict_485_0_8, 107, -1, G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_485_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatDict_485_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - sz u 'RootTrackerHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatDict_485_0_11, 107, -1, G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatDict_485_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_485_0_13, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatDict_485_0_14, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), G__defined_typename("vector<RootTrackerHit,allocator<RootTrackerHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrackerHit,allocator<RootTrackerHit> >",4798,G__DataFormatDict_485_0_15, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrackerHit,allocator<RootTrackerHit> >",4798,G__DataFormatDict_485_0_16, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n u 'RootTrackerHit' - 11 'RootTrackerHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrackerHit,allocator<RootTrackerHit> >",4798,G__DataFormatDict_485_0_17, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<RootTrackerHit,allocator<RootTrackerHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<RootTrackerHit,allocator<RootTrackerHit> >",4798,G__DataFormatDict_485_0_18, 105, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' 'vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator' 10 - first u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' 'vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatDict_485_0_19, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<RootTrackerHit,allocator<RootTrackerHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatDict_485_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatDict_485_0_21, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatDict_485_0_22, 117, G__get_linked_tagnum(&G__DataFormatDictLN_RootTrackerHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatDict_485_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'RootTrackerHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatDict_485_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrackerHit,allocator<RootTrackerHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_485_0_25, 117, G__get_linked_tagnum(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - position u 'RootTrackerHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_485_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - position u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' 'vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator' 10 - first "
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' 'vector<RootTrackerHit,allocator<RootTrackerHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatDict_485_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - position k - 'vector<RootTrackerHit,allocator<RootTrackerHit> >::size_type' 0 - n "
"u 'RootTrackerHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatDict_485_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_485_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatDict_485_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - first u 'vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatDict_485_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<RootTrackerHit,allocator<RootTrackerHit> >", 4924, G__DataFormatDict_485_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataFormatDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataFormatDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataFormatDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataFormatDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_RootCaloHit = { "RootCaloHit" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_RootTrack = { "RootTrack" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_RootVertex = { "RootVertex" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_RootTrackerHit = { "RootTrackerHit" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_RootEvent = { "RootEvent" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR = { "vector<RootTrack,allocator<RootTrack> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator = { "vector<RootTrack,allocator<RootTrack> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RootTrack,allocator<RootTrack> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR = { "vector<RootVertex,allocator<RootVertex> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator = { "vector<RootVertex,allocator<RootVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RootVertex,allocator<RootVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR = { "vector<RootCaloHit,allocator<RootCaloHit> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator = { "vector<RootCaloHit,allocator<RootCaloHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RootCaloHit,allocator<RootCaloHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR = { "vector<RootTrackerHit,allocator<RootTrackerHit> >" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator = { "vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RootTrackerHit,allocator<RootTrackerHit> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataFormatDict() {
  G__DataFormatDictLN_TClass.tagnum = -1 ;
  G__DataFormatDictLN_TBuffer.tagnum = -1 ;
  G__DataFormatDictLN_TMemberInspector.tagnum = -1 ;
  G__DataFormatDictLN_TObject.tagnum = -1 ;
  G__DataFormatDictLN_TString.tagnum = -1 ;
  G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_RootCaloHit.tagnum = -1 ;
  G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DataFormatDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DataFormatDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__DataFormatDictLN_TVector3.tagnum = -1 ;
  G__DataFormatDictLN_RootTrack.tagnum = -1 ;
  G__DataFormatDictLN_RootVertex.tagnum = -1 ;
  G__DataFormatDictLN_RootTrackerHit.tagnum = -1 ;
  G__DataFormatDictLN_RootEvent.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR.tagnum = -1 ;
  G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataFormatDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TString);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_RootCaloHit),sizeof(RootCaloHit),-1,325376,(char*)NULL,G__setup_memvarRootCaloHit,G__setup_memfuncRootCaloHit);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_RootTrack),sizeof(RootTrack),-1,325376,(char*)NULL,G__setup_memvarRootTrack,G__setup_memfuncRootTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_RootVertex),sizeof(RootVertex),-1,325376,(char*)NULL,G__setup_memvarRootVertex,G__setup_memfuncRootVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_RootTrackerHit),sizeof(RootTrackerHit),-1,325376,(char*)NULL,G__setup_memvarRootTrackerHit,G__setup_memfuncRootTrackerHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_RootEvent),sizeof(RootEvent),-1,325376,(char*)NULL,G__setup_memvarRootEvent,G__setup_memfuncRootEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgR),sizeof(vector<RootTrack,allocator<RootTrack> >),-1,298752,(char*)NULL,G__setup_memvarvectorlERootTrackcOallocatorlERootTrackgRsPgR,G__setup_memfuncvectorlERootTrackcOallocatorlERootTrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackcOallocatorlERootTrackgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgR),sizeof(vector<RootVertex,allocator<RootVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlERootVertexcOallocatorlERootVertexgRsPgR,G__setup_memfuncvectorlERootVertexcOallocatorlERootVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootVertexcOallocatorlERootVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR),sizeof(vector<RootCaloHit,allocator<RootCaloHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR,G__setup_memfuncvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootCaloHitcOallocatorlERootCaloHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR),sizeof(vector<RootTrackerHit,allocator<RootTrackerHit> >),-1,298752,(char*)NULL,G__setup_memvarvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR,G__setup_memfuncvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_vectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatDictLN_reverse_iteratorlEvectorlERootTrackerHitcOallocatorlERootTrackerHitgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDataFormatDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataFormatDict()");
  G__set_cpp_environmentDataFormatDict();
  G__cpp_setup_tagtableDataFormatDict();

  G__cpp_setup_inheritanceDataFormatDict();

  G__cpp_setup_typetableDataFormatDict();

  G__cpp_setup_memvarDataFormatDict();

  G__cpp_setup_memfuncDataFormatDict();
  G__cpp_setup_globalDataFormatDict();
  G__cpp_setup_funcDataFormatDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataFormatDict();
  return;
}
class G__cpp_setup_initDataFormatDict {
  public:
    G__cpp_setup_initDataFormatDict() { G__add_setup_func("DataFormatDict",(G__incsetup)(&G__cpp_setupDataFormatDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataFormatDict() { G__remove_setup_func("DataFormatDict"); }
};
G__cpp_setup_initDataFormatDict G__cpp_setup_initializerDataFormatDict;

